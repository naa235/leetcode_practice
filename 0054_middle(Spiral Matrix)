Given an m x n matrix, return all elements of the matrix in spiral order.

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> spiral;
        if (matrix.empty()) return spiral; // 如果矩阵为空，直接返回空向量

        int rows = matrix.size(), cols = matrix[0].size();
        int rowBegin = 0, rowEnd = rows - 1;
        int colBegin = 0, colEnd = cols - 1;

        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            // Traverse Right
            for (int j = colBegin; j <= colEnd; j++) {
                spiral.push_back(matrix[rowBegin][j]);
            }
            rowBegin++;

            // Traverse Down
            for (int i = rowBegin; i <= rowEnd; i++) {
                spiral.push_back(matrix[i][colEnd]);
            }
            colEnd--;

            if (rowBegin <= rowEnd) {
                // Traverse Left
                for (int j = colEnd; j >= colBegin; j--) {
                    spiral.push_back(matrix[rowEnd][j]);
                }
            }
            rowEnd--;
            if (colBegin <= colEnd) {
                // Traverse Up
                for (int i = rowEnd; i >= rowBegin; i--) {
                    spiral.push_back(matrix[i][colBegin]);
                }
            }
            colBegin++;
        }
        return spiral;
    }
};

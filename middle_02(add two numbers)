You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode();
        ListNode* head = result;
        int left = 0;
        int r1 = 0;
        int r2 = 0;
        while (1){
            if (l1 == nullptr)
                r1 = 0;
            else {
                r1 = l1->val;
                l1 = l1->next;
            }
            if (l2 == nullptr)
                r2 = 0;
            else {
                r2 = l2->val;
                l2 = l2->next;
            }
            result->val = (r1 + r2 + left) % 10;
            left = (r1 + r2 + left) / 10;
            if(l1 != nullptr || l2 != nullptr)
                {ListNode* ok = new ListNode();
                result->next = ok;
                result = ok;
                continue;}
            break;
        }
        if (left == 0)
            return head;
        ListNode* ok = new ListNode();
        result->next = ok;
        ok->val=left;
        return head;
    }
};

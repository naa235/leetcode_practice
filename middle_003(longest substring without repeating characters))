Given a string s, find the length of the longest 
substring without repeating characters.


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        std::unordered_map<char, int> charIndexMap; // 存储字符及其最后一次出现的索引
        int maxLength = 0; // 存储最大长度
        int start = 0; // 当前无重复子字符串的起始索引
        for (int i = 0; i < s.length(); i++) {
            if (charIndexMap.find(s[i]) != charIndexMap.end() &&
             charIndexMap[s[i]] >= start) {
                start = charIndexMap[s[i]] + 1; // 更新起始索引
            }
            charIndexMap[s[i]] = i; // 更新当前字符的索引
            maxLength = std::max(maxLength, i - start + 1); // 更新最大长度
        }
        return maxLength;
    }
};

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list.
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (head == nullptr || k == 1) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* pre = &dummy;
        ListNode* cur = head;
        ListNode* nex = nullptr;
        int length = 0;

        while (head != nullptr) { // 计算链表的长度
            length++;
            head = head->next;
        }

        // 对每k个节点进行反转
        for (int i = 0; i < length / k; i++) {
            cur = pre->next;
            nex = cur->next;
            for (int j = 1; j < k; j++) {
                cur->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = cur->next;
            }
            pre = cur;
        }
        return dummy.next;
    }
};

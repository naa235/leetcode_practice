Given the head of a linked list and a value x, 
partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode nodest1(0,nullptr);
        ListNode nodest2(0,nullptr);
        ListNode *nodelist1=&nodest1;
        ListNode *nodelist2=&nodest2;
        ListNode *node=head;
        while(node!=nullptr){
            if(node->val>=x){
                nodelist2->next=node;
                nodelist2=nodelist2->next;
                node=node->next;}
            else{
                nodelist1->next=node;
                nodelist1=nodelist1->next;
                node=node->next;}
        }
        nodelist2->next=nullptr;
        nodelist1->next=nodest2.next;
        return nodest1.next;
    }
};

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int i=0;
        
        vector<vector<int>> myvec;
        while(i<nums.size()-2&&nums[i]<=0){
            int j=nums.size()-1;
            int k=i+1;
            while(k<j){
                if(nums[k]+nums[i]+nums[j]>0)j--;
                else if(nums[i]+nums[j]+nums[k]<0)k++;
                else {
                    myvec.push_back(vector<int>{nums[i],nums[j],nums[k]});
                    j--;k++;
                }
                while(k<j&&k>i+1&&nums[k]==nums[k-1])k++;
                while(j>k&&j<nums.size()-1&&nums[j]==nums[j+1])j--;
            }
            i++;
            while(i<nums.size()-2&&nums[i]==nums[i-1])i++;
        }
        return myvec;
    }
};

给你一个整数数组 nums 和一个 正 整数 k 。你可以选择数组的任一 子序列 并且对其全部元素求和。
数组的 第 k 大和 定义为：可以获得的第 k 个 最大 子序列和（子序列和允许出现重复）
返回数组的 第 k 大和 。
子序列是一个可以由其他数组删除某些或不删除元素排生而来的数组，且派生过程不改变剩余元素的顺序。
注意：空子序列的和视作 0 。


class Solution {
public:
    long long kSum(vector<int>& nums, int k) {
        long long s=0;
        int n=nums.size();
        for(int &x:nums){
            if(x>=0) s+=x;
            else x=-x;
        }
        sort(nums.begin(),nums.end());
        priority_queue<pair<long long,int>,vector<pair<long long,int>>,greater<>>q;
        q.push({0,0});
        while (--k)
        {
            auto ts=q.top();q.pop();
            if(ts.second>=n) continue;
            q.push({ts.first+nums[ts.second],ts.second+1});
            if(ts.second) q.push({ts.first-nums[ts.second-1]+nums[ts.second],ts.second+1});
        }
        return s-q.top().first;
    }
};

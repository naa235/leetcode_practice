You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order.
The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int carry = 1; // Initially, we want to add 1
        for (int i = digits.size() - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10; // Update the current digit
            carry = sum / 10; // Calculate the carry for the next digit
            if (carry == 0) break; // If no carry, no need to continue
        }
        if (carry > 0) {
            digits.insert(digits.begin(), carry); // Insert carry at the beginning if needed
        }
        return digits;
    }
};

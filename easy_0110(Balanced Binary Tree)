Given a binary tree, determine if it is 
height-balanced

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        bool isbalance =true;
        function<int(int,TreeNode*)>findbalance=[&](int level,TreeNode* node)->int{
            if(node==nullptr)return level-1;
            int left=level;
            int right=level;
            if(node->left!=nullptr){
                left=findbalance(level+1,node->left);
            }
            if(node->right!=nullptr){
                right=findbalance(level+1,node->right);
            }
            if(abs(left-right)>1)isbalance=false;
            return left>right?left:right;
        };
        findbalance(0,root);
        return isbalance;
    }
};

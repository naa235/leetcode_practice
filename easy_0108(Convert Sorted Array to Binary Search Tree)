Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        function<TreeNode*(int,int)>bal=[&](int left,int right)->TreeNode*{
            TreeNode* newnode=new TreeNode;
            if(left>right)return nullptr;
            int mid=(left+right)>>1;
            newnode->val=nums[mid];
            newnode->left=bal(left,mid-1);
            newnode->right=bal(mid+1,right);
            return newnode;
        };
        return bal(0,nums.size()-1);
    }
};

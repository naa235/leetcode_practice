Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.length(), m = word2.length();
        vector<vector<int>> memo(n, vector<int>(m, -1));
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i < 0) return j + 1;
            if (j < 0) return i + 1;
            if (memo[i][j] != -1) return memo[i][j];
            if (word1[i] == word2[j]) {
                memo[i][j] = dfs(i - 1, j - 1);
            } else {
                memo[i][j] = 1 + min({dfs(i - 1, j), dfs(i, j - 1), dfs(i - 1, j - 1)});
            }
            return memo[i][j];
        };
        return dfs(n - 1, m - 1);
    }
};

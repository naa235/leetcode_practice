Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size()==0||intervals.size()==1)return intervals;
        sort(intervals.begin(),intervals.end(),[](const vector<int>&a,const vector<int>&b){
            return a[0]<b[0]||(a[0]==b[0]&&a[1]<b[1]);
        });
        vector<vector<int>>allvec;
        int frist=intervals[0][0];
        int last=intervals[0][1];
        for(int i=1;i<intervals.size();i++){
            if(intervals[i][0]<=last){
                last=max(last,intervals[i][1]);
            }
            else{
            allvec.push_back({frist,last});
            frist=intervals[i][0];
            last=intervals[i][1];
            }
        }
        allvec.push_back({frist,last});
        return allvec;
    }
};

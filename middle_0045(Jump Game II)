You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums.size()==1)return 0;
        int n=nums.size()-1;
        int sum=0,i=0;
        do{
            int j=nums[i];
            int maxi=0;
            int maxnum=0;
            for(int k=1;k<=j;k++){
                if(k+i>=n){return ++sum;}
                if(k+i+nums[k+i]>maxnum){
                    maxi=k+i;
                    maxnum=k+i+nums[k+i];
                }
            }
            i=maxi;
            sum++;
        }while(i<n);
        return sum;
    }
};

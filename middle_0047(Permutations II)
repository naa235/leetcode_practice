Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
class Solution {
public:
    bool next_permute(vector<int>& nums){
        int i,j,n=nums.size();
        for(i=n-2;i>=0&&nums[i]>=nums[i+1];i--);
        if(i<0)return false;
        for(j=n-1;j>i&&nums[j]<=nums[i];j--);
        swap(nums[i],nums[j]);
        reverse(nums.begin()+i+1,nums.end());
        return true;
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        set<vector<int>>allvec;
        allvec.insert(nums);
        while(next_permute(nums)){
            allvec.insert(nums);
        }
        vector<vector<int>> vevvec(allvec.begin(),allvec.end());
        return vevvec;
    }
};
